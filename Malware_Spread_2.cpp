#define bi vector<bool>
#define vi vector<int>
#define pb push_back 
#define pp pop()

class Solution {
public:
    int find_set(vector<int> &parent, int i){
        if(parent[i]==i) return i;
        return parent[i]=find_set(parent, parent[i]);
    }
    
    void dounion(vector<int> &par, int i, int j){
        int par_i = find_set(par,i);
        int par_j = find_set(par,j);
        if(par_i==par_j)return;
        if(par_i<par_j){
            par[par_j] = par_i;
        }
        else par[par_i] = par_j;
        
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        if(initial.size()==1)return initial[0];
        int min =initial[0];
        int max = INT_MIN;
        vector<vector<int>> adj(graph.size());
        vector<int> parent(graph.size(),-1);
        int n = graph.size();
        for(int i=0;i<n;++i) parent[i]=i;
        for(int i=0;i<graph.size();i++){
            for(int j=0;j<graph[i].size();j++){
                if(graph[i][j]==1 && i!=j){
                    adj[i].push_back(j);
            }
        }
        }
        int c = 0;
        for(int i=0;i<graph.size();i++){
            for(int j=0;j<adj[i].size();j++){
                dounion(parent,i,adj[i][j]);
            }
            
        }
        
        vi sze(graph.size(),0), infected(n,0);
        
        for(int i=0;i<n;i++)sze[find_set(parent,i)]++;
        for(int i=0;i<initial.size();i++)infected[find_set(parent,initial[i])]++;
        sort(initial.begin(),initial.end());
        min = initial[0];
        for(int i=0;i<initial.size();i++){
            cout<<initial[i]<<" "<<infected[find_set(parent,initial[i])]<<endl;
            if(infected[find_set(parent,initial[i])]==1){
                if(max<sze[find_set(parent,initial[i])]){
                    max = sze[find_set(parent,initial[i])];
                    min = initial[i];
                }
            }
        }
        return min;
    }
};
