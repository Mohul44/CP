class Solution {
public:
    vector<vector<int>> dic {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    int getFood(vector<vector<char>>& grid) {
        int r = grid.size();
        int c = grid[0].size();
        queue<pair<int, int>> q;
        int mini = INT_MAX;
        vector<vector<int>> dp(r, vector<int>(c, INT_MAX));
        for(int i = 0; i < r; i++) {
            for(int j = 0; j < c; j++) {
                if(grid[i][j] == '*') {
                    q.push({i, j});
                    dp[i][j] = 0;
                }
            }
        }
        while(!q.empty()) {
            pair<int, int> p = q.front();
            q.pop();
            for(int dir = 0; dir < dic.size(); dir++) {
                int i = p.first + dic[dir][0], j =  p.second + dic[dir][1];
                if(i < 0 || j < 0 || i >= r || j >=c || grid[i][j] == 'X') continue;
                if(dp[i][j] <= dp[p.first][p.second] + 1) continue;
                dp[i][j] = dp[p.first][p.second] + 1;
                if(grid[i][j] == '#') mini = min(mini, dp[i][j]);
                else q.push({i, j});
            }
        }
        return (mini == INT_MAX)? -1: mini;
    }
};
